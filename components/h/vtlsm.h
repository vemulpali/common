/*
 * Copyright - Nubos Networks
 *
 * Author - Sri
 */

#ifndef _VTL_SM_H_
#define _VTL_SM_H_

/* this class becomes the base class
 * for finite state machine
 *
 */

#include <unistd.h>


class StateMachine {
protected:
    StateMachine(int maxstates):mCurrentState(0), 
                                mMaxStates(maxstates),
                                mData(NULL),
                                mEventGenerated(false),
                                mRetVal(0) {}
                    /* Note - current state should start from 0 */

    enum { IGNORE_EVENT, CANNOT_HANDLE, ALLOW };

    typedef void (StateMachine::*StateFunctionPtr)();
    struct StateMachineMap {
        StateFunctionPtr mFuncPtr; 
    };

    int mCurrentState; 
    /* Events generated by external functions. That is face 
     * of the class, public functions. Should call this
     * function
     */
    void ExternalEvent(int currentstate, int len, void *data=NULL);
    /* Events generate by internal functions should call this
     * function.
     */
    void InternalEvent(int currentstate, int len, void *data=NULL);
    virtual const StateMachineMap *GetStateMapping() = 0;     
    void SetStateTransition(int state, int retval);
    void SetStateData(void *data, int len);
    int  ExecuteStateMachine();
    void SetRetValue(int val);

    int mMaxStates;
    void *mData;
    int   mLen;
    /* keeps track of whether event is generated */
    bool mEventGenerated;
    /* ret value of last executed state machine */
    int  mRetVal;

protected:

#define BEGIN_STATE_MAP \
    const StateMachineMap *GetStateMapping() { \
    static const StateMachineMap StateFuncs[] = { 

#define STATE_MAP_ENTRY(entry) \
    { reinterpret_cast<StateFunctionPtr>(entry) },

#define END_STATE_MAP \
    { NULL }, \
    };\
    return &StateFuncs[0]; }


#define BEGIN_TRANSITION_MAP \
    static const int TransitionMap[] = {

#define TRANSITION_MAP_ENTRY(entry) \
    entry,

#define END_TRANSITION_MAP(data) \
    0 };\
    ExternalEvent(TransitionMap[mCurrentState], data); 

#define CHECK_TRANSITION_MAP(state, action) \
    if (state == mCurrentState && (action == IGNORE_EVENT || action == CANNOT_HANDLE)) { \
        return; \
    }

};
#endif
